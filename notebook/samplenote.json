{
	"name": "samplenote",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0a3cd4c0-7384-4e57-9641-6285b444d314"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/08b02eee-9375-4b8e-bca4-e5bd025fe8c0/resourceGroups/azuredevelopment-rs/providers/Microsoft.Synapse/workspaces/adi-syanpe/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://adi-syanpe.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df=spark.read.load(path='abfss://synapedemo@azureadlssynape.dfs.core.windows.net/NYCTripSmall.parquet',format='parquet')\r\n",
					"display(df.limit(5))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.trip\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df1=spark.sql(\"select * from nyctaxi.trip\")\r\n",
					"display(df1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df2=spark.sql(\"\"\"SELECT  passengerCount,\r\n",
					"sum(tripDistanceMiles) as sumtripDistance,\r\n",
					"avg(tripDistanceMiles) as avgtripDistance\r\n",
					" FROM nyctaxi.trip\r\n",
					" WHERE passengerCount>0\r\n",
					"group by passengerCount\r\n",
					"order by passengerCount\r\n",
					"\"\"\")\r\n",
					"display(df2)\r\n",
					"df2.write.saveAsTable(\"nyctaxi.passengercount\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df3=spark.sql(\"select * from nyctaxi.passengercount\")\r\n",
					"df3.repartition(1)\r\n",
					"df3.write.mode(\"overwrite\").csv(\"/NYCTaxi/csvfile\")\r\n",
					"df3.write.mode(\"overwrite\").parquet(\"/NYCTaxi/parquetfile\")\r\n",
					"df3.write.mode(\"overwrite\").json(\"/NYCTaxi/Jsonfile\")"
				],
				"execution_count": 35
			}
		]
	}
}