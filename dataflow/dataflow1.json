{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_porunningtotal",
						"type": "DatasetReference"
					},
					"name": "PoRunningTotal"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_porunningouput",
						"type": "DatasetReference"
					},
					"name": "ouputsink",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLake_adf_development",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "window1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Column_1 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PoRunningTotal",
				"PoRunningTotal derive(EmpId = substring(Column_1,1,4),",
				"          Ename = substring(Column_1,5,11),",
				"          state = substring(Column_1,16,2),",
				"          phone = substring(Column_1,18,10),",
				"          total = substring(Column_1,28,3)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          EmpId,",
				"          Ename,",
				"          state,",
				"          phone,",
				"          total",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 window(asc(total, true),",
				"     runningtotal = sum(toInteger(total))) ~> window1",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string",
				"     ),",
				"     partitionFileNames:['EmployeezRunningtotal.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ouputsink"
			]
		}
	}
}